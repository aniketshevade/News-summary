{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red20\green67\blue174;\red246\green247\blue249;\red46\green49\blue51;
\red24\green25\blue27;\red77\green80\blue85;\red162\green0\blue16;\red186\green6\blue115;\red97\green3\blue173;
\red18\green115\blue126;}
{\*\expandedcolortbl;;\cssrgb\c9412\c35294\c73725;\cssrgb\c97255\c97647\c98039;\cssrgb\c23529\c25098\c26275;
\cssrgb\c12549\c12941\c14118;\cssrgb\c37255\c38824\c40784;\cssrgb\c70196\c7843\c7059;\cssrgb\c78824\c15294\c52549;\cssrgb\c46275\c15294\c73333;
\cssrgb\c3529\c52157\c56863;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 summarizeHinduNews\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 // Open the spreadsheet by ID and select the "HinduSummaries" sheet\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 spreadsheetId\cf4 \strokec4  = \cf7 \strokec7 "1o7UN0REY6KJ_2WGFQ5KamSpzYP0vkVKcvUJMzlgOdeA"\cf4 \strokec4 ;\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 ss\cf4 \strokec4  = \cf8 \strokec8 SpreadsheetApp\cf4 \strokec4 .\cf5 \strokec5 openById\cf4 \strokec4 (\cf5 \strokec5 spreadsheetId\cf4 \strokec4 );\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 sheet\cf4 \strokec4  = \cf5 \strokec5 ss\cf4 \strokec4 .\cf5 \strokec5 getSheetByName\cf4 \strokec4 (\cf7 \strokec7 "HinduSummaries"\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // URL for The Hindu national news RSS feed\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 feedUrl\cf4 \strokec4  = \cf7 \strokec7 'https://www.thehindu.com/news/national/feeder/default.rss'\cf4 \strokec4 ;\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 rssResponse\cf4 \strokec4  = \cf8 \strokec8 UrlFetchApp\cf4 \strokec4 .\cf5 \strokec5 fetch\cf4 \strokec4 (\cf5 \strokec5 feedUrl\cf4 \strokec4 );\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 rssContent\cf4 \strokec4  = \cf5 \strokec5 rssResponse\cf4 \strokec4 .\cf5 \strokec5 getContentText\cf4 \strokec4 ();\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Parse the RSS XML\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 xmlDocument\cf4 \strokec4  = \cf8 \strokec8 XmlService\cf4 \strokec4 .\cf5 \strokec5 parse\cf4 \strokec4 (\cf5 \strokec5 rssContent\cf4 \strokec4 );\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 channel\cf4 \strokec4  = \cf5 \strokec5 xmlDocument\cf4 \strokec4 .\cf5 \strokec5 getRootElement\cf4 \strokec4 ().\cf5 \strokec5 getChild\cf4 \strokec4 (\cf7 \strokec7 'channel'\cf4 \strokec4 );\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 items\cf4 \strokec4  = \cf5 \strokec5 channel\cf4 \strokec4 .\cf5 \strokec5 getChildren\cf4 \strokec4 (\cf7 \strokec7 'item'\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Process each RSS feed item\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 items\cf4 \strokec4 .\cf5 \strokec5 forEach\cf4 \strokec4 (\cf2 \strokec2 function\cf4 \strokec4 (\cf5 \strokec5 item\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 title\cf4 \strokec4  = \cf5 \strokec5 item\cf4 \strokec4 .\cf5 \strokec5 getChildText\cf4 \strokec4 (\cf7 \strokec7 'title'\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 link\cf4 \strokec4  = \cf5 \strokec5 item\cf4 \strokec4 .\cf5 \strokec5 getChildText\cf4 \strokec4 (\cf7 \strokec7 'link'\cf4 \strokec4 );\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf7 \strokec7 "Processing: "\cf4 \strokec4  + \cf5 \strokec5 title\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 try\cf4 \strokec4  \{\cb1 \
\cb3       \cf6 \strokec6 // Fetch the full article HTML\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 articleHtml\cf4 \strokec4  = \cf8 \strokec8 UrlFetchApp\cf4 \strokec4 .\cf5 \strokec5 fetch\cf4 \strokec4 (\cf5 \strokec5 link\cf4 \strokec4 ).\cf5 \strokec5 getContentText\cf4 \strokec4 ();\cb1 \
\cb3       \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 articleContent\cf4 \strokec4  = \cf5 \strokec5 extractMainContent\cf4 \strokec4 (\cf5 \strokec5 articleHtml\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf6 \strokec6 // Call the extended Mistral API to generate summary, geography and genre\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 result\cf4 \strokec4  = \cf5 \strokec5 callMistralAPIExtended\cf4 \strokec4 (\cf5 \strokec5 articleContent\cf4 \strokec4 );\cb1 \
\cb3       \cb1 \
\cb3       \cf6 \strokec6 // Append Date, Title, Link, Summary, Geography, and Genre to the sheet\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 sheet\cf4 \strokec4 .\cf5 \strokec5 appendRow\cf4 \strokec4 ([\cf2 \strokec2 new\cf4 \strokec4  \cf8 \strokec8 Date\cf4 \strokec4 (), \cf5 \strokec5 title\cf4 \strokec4 , \cf5 \strokec5 link\cf4 \strokec4 , \cf5 \strokec5 result\cf4 \strokec4 .\cf5 \strokec5 summary\cf4 \strokec4 , \cf5 \strokec5 result\cf4 \strokec4 .\cf5 \strokec5 geography\cf4 \strokec4 , \cf5 \strokec5 result\cf4 \strokec4 .\cf5 \strokec5 genre\cf4 \strokec4 ]);\cb1 \
\cb3     \} \cf2 \strokec2 catch\cf4 \strokec4  (\cf5 \strokec5 error\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf8 \strokec8 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf7 \strokec7 "Error processing article: "\cf4 \strokec4  + \cf5 \strokec5 title\cf4 \strokec4  + \cf7 \strokec7 " - "\cf4 \strokec4  + \cf5 \strokec5 error\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \});\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 extractMainContent\cf4 \strokec4 (\cf5 \strokec5 html\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf6 \strokec6 // Try to extract the article text from common containers used by The Hindu.\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 content\cf4 \strokec4  = \cf7 \strokec7 ""\cf4 \strokec4 ;\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Attempt to match a div with class "article-body" or "article"\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 match\cf4 \strokec4  = \cf5 \strokec5 html\cf4 \strokec4 .\cf5 \strokec5 match\cf4 \strokec4 (\cf9 \strokec9 /<div[^>]+class="(article-body|article)"[^>]*>([\\s\\S]*?)<\\/div>/\cf2 \strokec2 i\cf4 \strokec4 );\cb1 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 match\cf4 \strokec4  && \cf5 \strokec5 match\cf4 \strokec4 [\cf10 \strokec10 2\cf4 \strokec4 ]) \{\cb1 \
\cb3     \cf5 \strokec5 content\cf4 \strokec4  = \cf5 \strokec5 match\cf4 \strokec4 [\cf10 \strokec10 2\cf4 \strokec4 ];\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // If not found, try to extract content within an <article> tag\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  (!\cf5 \strokec5 content\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf5 \strokec5 match\cf4 \strokec4  = \cf5 \strokec5 html\cf4 \strokec4 .\cf5 \strokec5 match\cf4 \strokec4 (\cf9 \strokec9 /<article[^>]*>([\\s\\S]*?)<\\/article>/\cf2 \strokec2 i\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 match\cf4 \strokec4  && \cf5 \strokec5 match\cf4 \strokec4 [\cf10 \strokec10 1\cf4 \strokec4 ]) \{\cb1 \
\cb3       \cf5 \strokec5 content\cf4 \strokec4  = \cf5 \strokec5 match\cf4 \strokec4 [\cf10 \strokec10 1\cf4 \strokec4 ];\cb1 \
\cb3     \}\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 content\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf6 \strokec6 // Remove script and style tags, then strip remaining HTML tags.\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 content\cf4 \strokec4  = \cf5 \strokec5 content\cf4 \strokec4 .\cf5 \strokec5 replace\cf4 \strokec4 (\cf9 \strokec9 /<script[\\s\\S]*?<\\/script>/\cf2 \strokec2 gi\cf4 \strokec4 , \cf7 \strokec7 ''\cf4 \strokec4 )\cb1 \
\cb3                      .\cf5 \strokec5 replace\cf4 \strokec4 (\cf9 \strokec9 /<style[\\s\\S]*?<\\/style>/\cf2 \strokec2 gi\cf4 \strokec4 , \cf7 \strokec7 ''\cf4 \strokec4 )\cb1 \
\cb3                      .\cf5 \strokec5 replace\cf4 \strokec4 (\cf9 \strokec9 /<[^>]+>/\cf2 \strokec2 g\cf4 \strokec4 , \cf7 \strokec7 ' '\cf4 \strokec4 );\cb1 \
\cb3     \cf6 \strokec6 // Clean up whitespace and limit length\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 content\cf4 \strokec4  = \cf5 \strokec5 content\cf4 \strokec4 .\cf5 \strokec5 replace\cf4 \strokec4 (\cf9 \strokec9 /\\s+/\cf2 \strokec2 g\cf4 \strokec4 , \cf7 \strokec7 ' '\cf4 \strokec4 ).\cf5 \strokec5 trim\cf4 \strokec4 ();\cb1 \
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 content\cf4 \strokec4 .\cf5 \strokec5 substring\cf4 \strokec4 (\cf10 \strokec10 0\cf4 \strokec4 , \cf10 \strokec10 5000\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Final fallback: remove all HTML tags from the entire page\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 var\cf4 \strokec4  \cf5 \strokec5 fallback\cf4 \strokec4  = \cf5 \strokec5 html\cf4 \strokec4 .\cf5 \strokec5 replace\cf4 \strokec4 (\cf9 \strokec9 /<[^>]+>/\cf2 \strokec2 g\cf4 \strokec4 , \cf7 \strokec7 ' '\cf4 \strokec4 ).\cf5 \strokec5 replace\cf4 \strokec4 (\cf9 \strokec9 /\\s+/\cf2 \strokec2 g\cf4 \strokec4 , \cf7 \strokec7 ' '\cf4 \strokec4 ).\cf5 \strokec5 trim\cf4 \strokec4 ();\cb1 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 fallback\cf4 \strokec4 .\cf5 \strokec5 substring\cf4 \strokec4 (\cf10 \strokec10 0\cf4 \strokec4 , \cf10 \strokec10 5000\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 function\cf4 \strokec4  \cf5 \strokec5 callMistralAPIExtended\cf4 \strokec4 (\cf5 \strokec5 text\cf4 \strokec4 ) \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 apiUrl\cf4 \strokec4  = \cf7 \strokec7 "https://api.mistral.ai/v1/chat/completions"\cf4 \strokec4 ;\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 apiKey\cf4 \strokec4  = \cf7 \strokec7 ""\cf4 \strokec4 ; \cf6 \strokec6 // Replace with your actual Mistral API key\cf4 \cb1 \strokec4 \
\cb3   \cb1 \
\cb3  \cf6 \strokec6 // Prepare a prompt that instructs the model to return a JSON object\cf4 \cb1 \strokec4 \
\cb3   \cf6 \strokec6 // with keys: summary, geography, and genre.\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 prompt\cf4 \strokec4  = \cf7 \strokec7 `You will be given a news article. Analyze the content and return only a valid JSON object with the following fields:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf7 \cb3 \strokec7 \{\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7   "summary": "A concise, objective summary of the article in 3 sentences.",\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7   "geography": "The specific geographical scope of the news (e.g., 'India', 'Maharashtra', 'Mumbai'). If it's international, state 'International'.",\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7   "genre": "The category of the news (e.g., 'Politics', 'Entertainment', 'Sports', 'International', 'Local', 'Crime', etc.)."\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7 \}\cf4 \cb1 \strokec4 \
\
\cf7 \cb3 \strokec7 The output must be strictly valid JSON. Do not include any additional text, comments, or explanations outside the JSON block. Ensure all values are strings.\cf4 \cb1 \strokec4 \
\
\cf7 \cb3 \strokec7 News Article:\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 $\{\cf5 \strokec5 text\cf4 \strokec4 \}\cf7 \strokec7 `\cf4 \strokec4 ;\cb1 \
\
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 payload\cf4 \strokec4  = \{\cb1 \
\cb3     \cf5 \strokec5 model\cf4 \strokec4 : \cf7 \strokec7 "mistral-small-latest"\cf4 \strokec4 , \cf6 \strokec6 // or "mistral-medium"/"mistral-large" as needed\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 messages\cf4 \strokec4 : [\cb1 \
\cb3       \{\cb1 \
\cb3         \cf5 \strokec5 role\cf4 \strokec4 : \cf7 \strokec7 "user"\cf4 \strokec4 ,\cb1 \
\cb3         \cf5 \strokec5 content\cf4 \strokec4 : \cf5 \strokec5 prompt\cf4 \cb1 \strokec4 \
\cb3       \}\cb1 \
\cb3     ],\cb1 \
\cb3     \cf5 \strokec5 temperature\cf4 \strokec4 : \cf10 \strokec10 0.7\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 max_tokens\cf4 \strokec4 : \cf10 \strokec10 400\cf4 \cb1 \strokec4 \
\cb3   \};\cb1 \
\
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 options\cf4 \strokec4  = \{\cb1 \
\cb3     \cf5 \strokec5 method\cf4 \strokec4 : \cf7 \strokec7 "post"\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 contentType\cf4 \strokec4 : \cf7 \strokec7 "application/json"\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 headers\cf4 \strokec4 : \{\cb1 \
\cb3       \cf8 \strokec8 Authorization\cf4 \strokec4 : \cf7 \strokec7 "Bearer "\cf4 \strokec4  + \cf5 \strokec5 apiKey\cf4 \cb1 \strokec4 \
\cb3     \},\cb1 \
\cb3     \cf5 \strokec5 payload\cf4 \strokec4 : \cf8 \strokec8 JSON\cf4 \strokec4 .\cf5 \strokec5 stringify\cf4 \strokec4 (\cf5 \strokec5 payload\cf4 \strokec4 ),\cb1 \
\cb3     \cf5 \strokec5 muteHttpExceptions\cf4 \strokec4 : \cf2 \strokec2 true\cf4 \cb1 \strokec4 \
\cb3   \};\cb1 \
\
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 response\cf4 \strokec4  = \cf8 \strokec8 UrlFetchApp\cf4 \strokec4 .\cf5 \strokec5 fetch\cf4 \strokec4 (\cf5 \strokec5 apiUrl\cf4 \strokec4 , \cf5 \strokec5 options\cf4 \strokec4 );\cb1 \
\cb3   \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 responseText\cf4 \strokec4  = \cf5 \strokec5 response\cf4 \strokec4 .\cf5 \strokec5 getContentText\cf4 \strokec4 ();\cb1 \
\cb3   \cf8 \strokec8 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf7 \strokec7 "Mistral API Extended Response: "\cf4 \strokec4  + \cf5 \strokec5 responseText\cf4 \strokec4 );\cb1 \
\cb3   \cb1 \
\cb3   \cf6 \strokec6 // Default output in case of parsing issues\cf4 \cb1 \strokec4 \
\cb3   \cf2 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 output\cf4 \strokec4  = \{\cb1 \
\cb3     \cf5 \strokec5 summary\cf4 \strokec4 : \cf7 \strokec7 "Summary not available."\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 geography\cf4 \strokec4 : \cf7 \strokec7 "Not specified"\cf4 \strokec4 ,\cb1 \
\cb3     \cf5 \strokec5 genre\cf4 \strokec4 : \cf7 \strokec7 "Not specified"\cf4 \cb1 \strokec4 \
\cb3   \};\cb1 \
\
\cb3   \cf2 \strokec2 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf2 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 jsonResponse\cf4 \strokec4  = \cf8 \strokec8 JSON\cf4 \strokec4 .\cf5 \strokec5 parse\cf4 \strokec4 (\cf5 \strokec5 responseText\cf4 \strokec4 );\cb1 \
\cb3     \cf2 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 content\cf4 \strokec4  = \cf5 \strokec5 jsonResponse\cf4 \strokec4 .\cf5 \strokec5 choices\cf4 \strokec4  && \cf5 \strokec5 jsonResponse\cf4 \strokec4 .\cf5 \strokec5 choices\cf4 \strokec4 [\cf10 \strokec10 0\cf4 \strokec4 ] && \cf5 \strokec5 jsonResponse\cf4 \strokec4 .\cf5 \strokec5 choices\cf4 \strokec4 [\cf10 \strokec10 0\cf4 \strokec4 ].\cf5 \strokec5 message\cf4 \strokec4  && \cf5 \strokec5 jsonResponse\cf4 \strokec4 .\cf5 \strokec5 choices\cf4 \strokec4 [\cf10 \strokec10 0\cf4 \strokec4 ].\cf5 \strokec5 message\cf4 \strokec4 .\cf5 \strokec5 content\cf4 \strokec4 ;\cb1 \
\cb3     \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 content\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf6 \strokec6 // Sometimes the API may return extra text before or after the JSON, so try to isolate the JSON substring.\cf4 \cb1 \strokec4 \
\cb3       \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 jsonStart\cf4 \strokec4  = \cf5 \strokec5 content\cf4 \strokec4 .\cf5 \strokec5 indexOf\cf4 \strokec4 (\cf7 \strokec7 '\{'\cf4 \strokec4 );\cb1 \
\cb3       \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 jsonEnd\cf4 \strokec4  = \cf5 \strokec5 content\cf4 \strokec4 .\cf5 \strokec5 lastIndexOf\cf4 \strokec4 (\cf7 \strokec7 '\}'\cf4 \strokec4 );\cb1 \
\cb3       \cf2 \strokec2 if\cf4 \strokec4  (\cf5 \strokec5 jsonStart\cf4 \strokec4  !== -\cf10 \strokec10 1\cf4 \strokec4  && \cf5 \strokec5 jsonEnd\cf4 \strokec4  !== -\cf10 \strokec10 1\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf2 \strokec2 const\cf4 \strokec4  \cf5 \strokec5 jsonString\cf4 \strokec4  = \cf5 \strokec5 content\cf4 \strokec4 .\cf5 \strokec5 substring\cf4 \strokec4 (\cf5 \strokec5 jsonStart\cf4 \strokec4 , \cf5 \strokec5 jsonEnd\cf4 \strokec4  + \cf10 \strokec10 1\cf4 \strokec4 );\cb1 \
\cb3         \cf2 \strokec2 try\cf4 \strokec4  \{\cb1 \
\cb3           \cf2 \strokec2 let\cf4 \strokec4  \cf5 \strokec5 parsedContent\cf4 \strokec4  = \cf8 \strokec8 JSON\cf4 \strokec4 .\cf5 \strokec5 parse\cf4 \strokec4 (\cf5 \strokec5 jsonString\cf4 \strokec4 );\cb1 \
\cb3           \cf5 \strokec5 output\cf4 \strokec4 .\cf5 \strokec5 summary\cf4 \strokec4  = \cf5 \strokec5 parsedContent\cf4 \strokec4 .\cf5 \strokec5 summary\cf4 \strokec4  || \cf5 \strokec5 output\cf4 \strokec4 .\cf5 \strokec5 summary\cf4 \strokec4 ;\cb1 \
\cb3           \cf5 \strokec5 output\cf4 \strokec4 .\cf5 \strokec5 geography\cf4 \strokec4  = \cf5 \strokec5 parsedContent\cf4 \strokec4 .\cf5 \strokec5 geography\cf4 \strokec4  || \cf5 \strokec5 output\cf4 \strokec4 .\cf5 \strokec5 geography\cf4 \strokec4 ;\cb1 \
\cb3           \cf5 \strokec5 output\cf4 \strokec4 .\cf5 \strokec5 genre\cf4 \strokec4  = \cf5 \strokec5 parsedContent\cf4 \strokec4 .\cf5 \strokec5 genre\cf4 \strokec4  || \cf5 \strokec5 output\cf4 \strokec4 .\cf5 \strokec5 genre\cf4 \strokec4 ;\cb1 \
\cb3         \} \cf2 \strokec2 catch\cf4 \strokec4  (\cf5 \strokec5 jsonErr\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf8 \strokec8 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf7 \strokec7 "Error parsing JSON from content: "\cf4 \strokec4  + \cf5 \strokec5 jsonErr\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3   \} \cf2 \strokec2 catch\cf4 \strokec4  (\cf5 \strokec5 err\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf8 \strokec8 Logger\cf4 \strokec4 .\cf5 \strokec5 log\cf4 \strokec4 (\cf7 \strokec7 "Error parsing API response: "\cf4 \strokec4  + \cf5 \strokec5 err\cf4 \strokec4 );\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 return\cf4 \strokec4  \cf5 \strokec5 output\cf4 \strokec4 ;\cb1 \
\cb3 \}\cb1 \
}